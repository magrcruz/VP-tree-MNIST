#pragma once
#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#include <queue>
#include <random>
#include <bitset>
#include <string>
using namespace std;

#define Image bitset<784>
#define _distancia float
#define _distanciaMAX FLT_MAX
#define _dimensiones 784
#define _imagenes 60000

// ============ MATH ============
// Raices precalculadas
_distancia sqrts[785] = { 0,1,1.41421353816986083984375,1.73205077648162841796875,2,2.2360680103302001953125,2.4494898319244384765625,2.6457512378692626953125,2.8284270763397216796875,3,3.162277698516845703125,3.3166248798370361328125,3.4641015529632568359375,3.605551242828369140625,3.7416574954986572265625,3.872983455657958984375,4,4.123105525970458984375,4.24264049530029296875,4.35889911651611328125,4.472136020660400390625,4.58257579803466796875,4.690415859222412109375,4.7958316802978515625,4.898979663848876953125,5,5.099019527435302734375,5.196152210235595703125,5.291502475738525390625,5.385164737701416015625,5.477225780487060546875,5.5677642822265625,5.656854152679443359375,5.744562625885009765625,5.830951690673828125,5.916079998016357421875,6,6.08276271820068359375,6.164413928985595703125,6.24499797821044921875,6.32455539703369140625,6.403124332427978515625,6.48074054718017578125,6.557438373565673828125,6.633249759674072265625,6.708203792572021484375,6.782330036163330078125,6.85565471649169921875,6.928203105926513671875,7,7.07106781005859375,7.141428470611572265625,7.21110248565673828125,7.280109882354736328125,7.348469257354736328125,7.416198253631591796875,7.483314990997314453125,7.54983425140380859375,7.61577320098876953125,7.68114566802978515625,7.74596691131591796875,7.810249805450439453125,7.874007701873779296875,7.9372539520263671875,8,8.0622577667236328125,8.1240386962890625,8.185352325439453125,8.24621105194091796875,8.3066234588623046875,8.36660003662109375,8.4261493682861328125,8.4852809906005859375,8.54400348663330078125,8.602325439453125,8.66025447845458984375,8.7177982330322265625,8.77496433258056640625,8.831760406494140625,8.88819408416748046875,8.94427204132080078125,9,9.055385589599609375,9.1104335784912109375,9.1651515960693359375,9.21954441070556640625,9.2736186981201171875,9.3273792266845703125,9.38083171844482421875,9.4339809417724609375,9.48683261871337890625,9.5393924713134765625,9.591663360595703125,9.64365100860595703125,9.6953601837158203125,9.74679470062255859375,9.79795932769775390625,9.848857879638671875,9.89949512481689453125,9.94987392425537109375,10,10.0498752593994140625,10.0995044708251953125,10.148891448974609375,10.19803905487060546875,10.24695110321044921875,10.29563045501708984375,10.3440799713134765625,10.39230442047119140625,10.44030666351318359375,10.4880886077880859375,10.5356540679931640625,10.58300495147705078125,10.630146026611328125,10.6770782470703125,10.72380542755126953125,10.77032947540283203125,10.816654205322265625,10.86278057098388671875,10.9087123870849609375,10.95445156097412109375,11,11.045360565185546875,11.0905361175537109375,11.135528564453125,11.180339813232421875,11.224971771240234375,11.26942729949951171875,11.31370830535888671875,11.3578166961669921875,11.4017543792724609375,11.44552326202392578125,11.48912525177001953125,11.532562255859375,11.57583713531494140625,11.61894989013671875,11.66190338134765625,11.70469951629638671875,11.74734020233154296875,11.78982639312744140625,11.83215999603271484375,11.8743419647216796875,11.91637516021728515625,11.95826053619384765625,12,12.04159450531005859375,12.08304595947265625,12.124355316162109375,12.1655254364013671875,12.20655536651611328125,12.24744892120361328125,12.2882061004638671875,12.32882785797119140625,12.36931705474853515625,12.4096736907958984375,12.4498996734619140625,12.4899959564208984375,12.529964447021484375,12.569805145263671875,12.60951995849609375,12.6491107940673828125,12.6885776519775390625,12.7279224395751953125,12.7671451568603515625,12.80624866485595703125,12.84523296356201171875,12.88409900665283203125,12.922847747802734375,12.9614810943603515625,13,13.0384044647216796875,13.0766963958740234375,13.11487674713134765625,13.15294647216796875,13.19090557098388671875,13.22875690460205078125,13.26649951934814453125,13.304134368896484375,13.34166431427001953125,13.37908840179443359375,13.41640758514404296875,13.45362377166748046875,13.4907379150390625,13.52774906158447265625,13.56466007232666015625,13.601470947265625,13.6381816864013671875,13.67479419708251953125,13.7113094329833984375,13.74772739410400390625,13.78404903411865234375,13.82027530670166015625,13.85640621185302734375,13.89244365692138671875,13.9283885955810546875,13.96424007415771484375,14,14.03566837310791015625,14.071247100830078125,14.10673618316650390625,14.1421356201171875,14.17744731903076171875,14.21267032623291015625,14.247806549072265625,14.28285694122314453125,14.317821502685546875,14.35270023345947265625,14.3874950408935546875,14.4222049713134765625,14.45683193206787109375,14.4913768768310546875,14.5258388519287109375,14.56021976470947265625,14.59451961517333984375,14.6287384033203125,14.6628780364990234375,14.69693851470947265625,14.73091983795166015625,14.76482295989990234375,14.798648834228515625,14.83239650726318359375,14.86606884002685546875,14.89966487884521484375,14.93318462371826171875,14.96662998199462890625,15,15.0332965850830078125,15.0665187835693359375,15.0996685028076171875,15.1327457427978515625,15.1657505035400390625,15.19868373870849609375,15.2315464019775390625,15.2643375396728515625,15.29705810546875,15.3297100067138671875,15.3622913360595703125,15.3948040008544921875,15.42724895477294921875,15.459625244140625,15.4919338226318359375,15.52417469024658203125,15.5563488006591796875,15.5884571075439453125,15.62049961090087890625,15.65247631072998046875,15.68438720703125,15.71623325347900390625,15.74801540374755859375,15.7797336578369140625,15.8113880157470703125,15.84297943115234375,15.874507904052734375,15.9059734344482421875,15.93737697601318359375,15.968719482421875,16,16.031219482421875,16.0623779296875,16.0934772491455078125,16.124515533447265625,16.15549468994140625,16.1864147186279296875,16.2172756195068359375,16.248077392578125,16.278820037841796875,16.3095073699951171875,16.3401355743408203125,16.37070465087890625,16.4012203216552734375,16.4316768646240234375,16.462078094482421875,16.4924221038818359375,16.5227108001708984375,16.5529460906982421875,16.5831241607666015625,16.613246917724609375,16.6433162689208984375,16.67333221435546875,16.7032928466796875,16.7332000732421875,16.76305389404296875,16.7928562164306640625,16.8226032257080078125,16.852298736572265625,16.8819427490234375,16.9115352630615234375,16.941074371337890625,16.970561981201171875,17,17.0293865203857421875,17.0587215423583984375,17.0880069732666015625,17.1172428131103515625,17.1464290618896484375,17.175563812255859375,17.20465087890625,17.2336883544921875,17.262676239013671875,17.2916164398193359375,17.3205089569091796875,17.3493518829345703125,17.378147125244140625,17.406894683837890625,17.435596466064453125,17.4642486572265625,17.492855072021484375,17.52141571044921875,17.5499286651611328125,17.578395843505859375,17.6068172454833984375,17.63519287109375,17.66352081298828125,17.691806793212890625,17.7200450897216796875,17.7482395172119140625,17.7763881683349609375,17.804492950439453125,17.832553863525390625,17.8605709075927734375,17.8885440826416015625,17.916473388671875,17.94435882568359375,17.9722003936767578125,18,18.0277557373046875,18.055469512939453125,18.083141326904296875,18.11077117919921875,18.1383571624755859375,18.16590118408203125,18.1934051513671875,18.220867156982421875,18.248287200927734375,18.2756671905517578125,18.303005218505859375,18.330303192138671875,18.3575592041015625,18.384777069091796875,18.411952972412109375,18.4390888214111328125,18.4661846160888671875,18.4932422637939453125,18.520259857177734375,18.547237396240234375,18.5741748809814453125,18.6010761260986328125,18.6279354095458984375,18.654758453369140625,18.68154144287109375,18.708286285400390625,18.7349948883056640625,18.7616634368896484375,18.7882938385009765625,18.81488800048828125,18.8414440155029296875,18.867961883544921875,18.894443511962890625,18.920886993408203125,18.947296142578125,18.9736652374267578125,19,19.02629852294921875,19.05255889892578125,19.078784942626953125,19.10497283935546875,19.13112640380859375,19.1572437286376953125,19.18332672119140625,19.20937347412109375,19.2353839874267578125,19.26136016845703125,19.2873020172119140625,19.3132076263427734375,19.3390789031982421875,19.3649158477783203125,19.390720367431640625,19.4164886474609375,19.44222259521484375,19.467922210693359375,19.4935894012451171875,19.5192203521728515625,19.5448207855224609375,19.570384979248046875,19.5959186553955078125,19.6214160919189453125,19.6468830108642578125,19.6723155975341796875,19.69771575927734375,19.72308349609375,19.748416900634765625,19.77371978759765625,19.7989902496337890625,19.8242282867431640625,19.84943389892578125,19.874607086181640625,19.8997478485107421875,19.92485809326171875,19.9499378204345703125,19.9749851226806640625,20,20.0249843597412109375,20.049938201904296875,20.074859619140625,20.099750518798828125,20.12461090087890625,20.149440765380859375,20.1742401123046875,20.199008941650390625,20.2237491607666015625,20.2484569549560546875,20.2731342315673828125,20.29778289794921875,20.3224010467529296875,20.3469905853271484375,20.3715496063232421875,20.3960781097412109375,20.4205780029296875,20.4450473785400390625,20.46949005126953125,20.4939022064208984375,20.518283843994140625,20.5426387786865234375,20.56696319580078125,20.5912609100341796875,20.615528106689453125,20.639766693115234375,20.66397857666015625,20.688159942626953125,20.712314605712890625,20.7364406585693359375,20.760540008544921875,20.7846088409423828125,20.8086528778076171875,20.8326663970947265625,20.8566532135009765625,20.8806133270263671875,20.904544830322265625,20.9284496307373046875,20.952327728271484375,20.976177215576171875,21,21.02379608154296875,21.047565460205078125,21.071308135986328125,21.0950222015380859375,21.1187114715576171875,21.1423740386962890625,21.1660099029541015625,21.1896209716796875,21.21320343017578125,21.2367610931396484375,21.26029205322265625,21.2837963104248046875,21.3072757720947265625,21.3307285308837890625,21.354156494140625,21.3775577545166015625,21.4009342193603515625,21.424285888671875,21.4476108551025390625,21.4709110260009765625,21.4941844940185546875,21.5174350738525390625,21.5406589508056640625,21.5638580322265625,21.587032318115234375,21.6101837158203125,21.63330841064453125,21.6564083099365234375,21.6794834136962890625,21.702533721923828125,21.7255611419677734375,21.7485637664794921875,21.771541595458984375,21.79449462890625,21.817424774169921875,21.8403301239013671875,21.8632106781005859375,21.8860683441162109375,21.9089031219482421875,21.931713104248046875,21.954498291015625,21.977260589599609375,22,22.0227146148681640625,22.0454082489013671875,22.06807708740234375,22.09072113037109375,22.1133441925048828125,22.135944366455078125,22.158519744873046875,22.181072235107421875,22.2036037445068359375,22.2261104583740234375,22.24859619140625,22.27105712890625,22.2934970855712890625,22.315914154052734375,22.3383083343505859375,22.36067962646484375,22.383029937744140625,22.40535736083984375,22.427661895751953125,22.44994354248046875,22.4722042083740234375,22.4944438934326171875,22.5166606903076171875,22.5388545989990234375,22.56102752685546875,22.583179473876953125,22.60530853271484375,22.6274166107177734375,22.6495037078857421875,22.6715679168701171875,22.69361114501953125,22.715633392333984375,22.7376346588134765625,22.759613037109375,22.7815723419189453125,22.803508758544921875,22.8254241943359375,22.8473186492919921875,22.86919403076171875,22.8910465240478515625,22.9128780364990234375,22.9346904754638671875,22.9564800262451171875,22.9782505035400390625,23,23.021728515625,23.043437957763671875,23.06512451171875,23.0867919921875,23.108440399169921875,23.1300678253173828125,23.1516742706298828125,23.173259735107421875,23.1948261260986328125,23.216373443603515625,23.2378997802734375,23.25940704345703125,23.2808933258056640625,23.30236053466796875,23.3238067626953125,23.3452358245849609375,23.366641998291015625,23.388031005859375,23.4093990325927734375,23.4307498931884765625,23.4520778656005859375,23.473388671875,23.4946804046630859375,23.5159511566162109375,23.537204742431640625,23.558437347412109375,23.5796527862548828125,23.6008472442626953125,23.6220245361328125,23.64318084716796875,23.6643199920654296875,23.6854381561279296875,23.706539154052734375,23.7276210784912109375,23.748683929443359375,23.7697277069091796875,23.7907543182373046875,23.8117618560791015625,23.8327503204345703125,23.85372161865234375,23.87467193603515625,23.89560699462890625,23.9165210723876953125,23.9374179840087890625,23.9582977294921875,23.9791584014892578125,24,24.020824432373046875,24.041629791259765625,24.0624179840087890625,24.0831890106201171875,24.1039409637451171875,24.124675750732421875,24.14539337158203125,24.1660919189453125,24.1867733001708984375,24.2074375152587890625,24.2280826568603515625,24.24871063232421875,24.269321441650390625,24.2899150848388671875,24.3104915618896484375,24.331050872802734375,24.3515911102294921875,24.3721160888671875,24.3926219940185546875,24.4131107330322265625,24.4335842132568359375,24.4540386199951171875,24.474475860595703125,24.4948978424072265625,24.515300750732421875,24.5356884002685546875,24.5560588836669921875,24.576412200927734375,24.59674835205078125,24.6170673370361328125,24.6373691558837890625,24.6576557159423828125,24.67792510986328125,24.698177337646484375,24.718414306640625,24.7386341094970703125,24.7588367462158203125,24.7790241241455078125,24.7991943359375,24.819347381591796875,24.83948516845703125,24.8596057891845703125,24.879711151123046875,24.899799346923828125,24.919872283935546875,24.9399280548095703125,24.95996856689453125,24.979991912841796875,25,25.019992828369140625,25.0399684906005859375,25.05992889404296875,25.07987213134765625,25.09980010986328125,25.11971282958984375,25.13961029052734375,25.1594905853271484375,25.1793575286865234375,25.1992053985595703125,25.2190399169921875,25.2388591766357421875,25.2586612701416015625,25.27845001220703125,25.298221588134765625,25.3179779052734375,25.337718963623046875,25.35744476318359375,25.377155303955078125,25.3968505859375,25.416530609130859375,25.43619537353515625,25.455844879150390625,25.4754791259765625,25.495098114013671875,25.51470184326171875,25.534290313720703125,25.5538654327392578125,25.5734233856201171875,25.592967987060546875,25.6124973297119140625,25.63201141357421875,25.6515102386474609375,25.6709957122802734375,25.6904659271240234375,25.7099208831787109375,25.7293605804443359375,25.74878692626953125,25.7681980133056640625,25.787593841552734375,25.806976318359375,25.826343536376953125,25.84569549560546875,25.8650341033935546875,25.884357452392578125,25.903667449951171875,25.922962188720703125,25.9422435760498046875,25.96150970458984375,25.980762481689453125,26,26.0192241668701171875,26.038433074951171875,26.057628631591796875,26.076808929443359375,26.0959758758544921875,26.1151294708251953125,26.1342678070068359375,26.153392791748046875,26.172504425048828125,26.191600799560546875,26.21068572998046875,26.2297534942626953125,26.248809814453125,26.2678508758544921875,26.2868785858154296875,26.3058929443359375,26.324893951416015625,26.34387969970703125,26.3628520965576171875,26.3818111419677734375,26.4007568359375,26.419689178466796875,26.4386081695556640625,26.4575138092041015625,26.4764041900634765625,26.4952831268310546875,26.5141468048095703125,26.5329990386962890625,26.5518360137939453125,26.570659637451171875,26.5894718170166015625,26.60826873779296875,26.6270542144775390625,26.645824432373046875,26.6645832061767578125,26.6833286285400390625,26.702060699462890625,26.7207775115966796875,26.7394847869873046875,26.7581768035888671875,26.77685546875,26.7955226898193359375,26.814174652099609375,26.8328151702880859375,26.8514423370361328125,26.8700580596923828125,26.8886585235595703125,26.9072475433349609375,26.925823211669921875,26.9443874359130859375,26.9629383087158203125,26.981475830078125,27,27.018512725830078125,27.0370121002197265625,27.0554981231689453125,27.0739727020263671875,27.092433929443359375,27.1108837127685546875,27.1293201446533203125,27.14774322509765625,27.1661548614501953125,27.1845550537109375,27.20294189453125,27.2213153839111328125,27.23967742919921875,27.258026123046875,27.276363372802734375,27.2946872711181640625,27.312999725341796875,27.3313007354736328125,27.3495883941650390625,27.3678646087646484375,27.386127471923828125,27.4043788909912109375,27.422618865966796875,27.440845489501953125,27.4590606689453125,27.4772624969482421875,27.4954547882080078125,27.51363372802734375,27.53179931640625,27.5499553680419921875,27.5680980682373046875,27.5862293243408203125,27.60434722900390625,27.6224536895751953125,27.6405506134033203125,27.658634185791015625,27.67670440673828125,27.6947650909423828125,27.7128124237060546875,27.7308483123779296875,27.748874664306640625,27.766887664794921875,27.7848873138427734375,27.8028774261474609375,27.8208560943603515625,27.8388214111328125,27.856777191162109375,27.8747196197509765625,27.892650604248046875,27.910572052001953125,27.9284801483154296875,27.946376800537109375,27.9642620086669921875,27.9821376800537109375,28 };

_distancia squared(const _distancia& val) { return val * val; }

_distancia calcularDistancia(const Image& a, const Image& b) {
	// Distancia euclideana optimizada para conjunto de booleanos
	return sqrts[(a ^ b).count()];
}

int getSetSampleSize(int n) {
	// Obtener el tamanio del muestreo aleatorio basado en la distribucion Hipergeometrica
	if (n > 1000) return (n * 0.9604) / (0.0025 * (n - 1) + 0.9604); // Confianza del 95% con margen de error del 5%
	if (n > 72) return (n * 0.6765) / (0.01 * (n - 1) + 0.6765); // Confianza del 90% con margen de error del 10%
	return n / 3;
	// 0.9604 corresponde al valor z^2*p*q y 0.01 margen de error al cuadrado
}

//Generacion de numeros aleatorios
random_device rd;  // Semilla
mt19937 gen(rd()); // Generador Pseudo Random
void genRandom(vector<pair<_distancia, Image>>& img, int low, int hight, int k) {
	// Coloca los numeros aleatorios al comienzo del vector
	uniform_int_distribution<int>distrib(low, hight - 1);
	for (int i = low; i < k; i++) {
		swap(img[i], img[distrib(gen)]);
	}
}

// ============ READ DATASET ============
void ReadData(vector<pair<_distancia, Image>>& img) {
	FILE* dataset;
	dataset = fopen("dataset", "r");

	int n;
	fread(&n, sizeof(int), 1, dataset);

	string buffer(_dimensiones, '\0');
	for (int i = 0; i < _imagenes; i++) {
		fread(&buffer[0], sizeof(char), _dimensiones, dataset);
		img[i] = pair<_distancia, Image>(_distanciaMAX, buffer);
	}
	fclose(dataset);
}

// ============ STRUCTURE ============

class VPTree {
	struct VPNode {
		Image valor;					// Imagen almacenada en el nodo
		_distancia distanciaMediana;	// La distancia a la mediana o radio del circulo
		VPNode* izq = 0, * der = 0;		// Hijos del nodo 
		VPNode(Image _valor, _distancia _distanciaMediana) :
			valor(_valor), distanciaMediana(_distanciaMediana) {};
	};
	VPNode* root = 0;

	void elegirVantagePoint(vector<pair<_distancia, Image>>& img, int ini, int fin);
	void buildVPTree(vector<pair<_distancia, Image>>& img, VPNode** place, int ini, int fin);
	void knnRecursivo(VPNode* node, priority_queue<pair<_distancia, Image*>>& q, _distancia& tau, Image& consulta, int& k);
	void destructorR(VPNode* root);

public:
	VPTree() {};
	~VPTree() { destructorR(root); }
	int buildVPTree() {
		vector<pair<_distancia, Image>> img(_imagenes);
		ReadData(img);
		buildVPTree(img, &root, 0, _imagenes);
		return 0;
	}
	void knn(Image consulta, int k, vector<Image>& img);
};

// ============ SHOW ============
void printImage(const string& img) {
	for (int i = 0; i < _dimensiones; i += 28)
		cout << img.substr(i, 28) << endl;
	cout << endl;
}

void printImage(Image& img) {
	string str(img.to_string());
	for (int i = 0; i < _dimensiones; i += 28)
		cout << str.substr(i, 28) << endl;
	cout << endl;
}

void printImages(vector<Image>& img) {
	for (int i = 0; i < img.size(); i++) {
		printImage(img[i]);
	}
}

// ============ AUXILIARS ============
bool comp(const pair<_distancia, Image>& a, const pair<_distancia, Image>& b) { return a.first < b.first; }

void calcularDistancias(vector<pair<_distancia, Image>>& img, int ini, int fin, Image& vp) {
	for (int i = ini; i < fin; i++)
		img[i].first = calcularDistancia(img[i].second, vp);
}

_distancia calcularMediana(vector<pair<_distancia, Image>>& img, int ini, int fin) {
	int pos = (fin + ini) >> 1;
	nth_element(img.begin() + ini, img.begin() + pos, img.begin() + fin, comp);
	// Se utiliza nth_element por dos razones, su complejidad es aproximadamente lineal
	// ademas separa al conjunto en 2, un elemento que la izquierda no sera mayor al elemento indicado
	return img[pos].first;
}

_distancia calcularMedianaDividir(vector<pair<_distancia, Image>>& img, int ini, int fin, int& pos) {
	// Se encarga de que los valores menores esten a la derecha y los mayores iguales a la izquierda
	_distancia mediana = calcularMediana(img, ini, fin);
	pos = (fin + ini) >> 1;
	for (int i = ini; i < pos; i++) {
		if (img[i].first == mediana) {
			swap(img[i], img[pos - 1]);
			pos--;
		}
	}
	return mediana;
}

_distancia calcularSpread(vector<pair<_distancia, Image>>& img, int ini, int fin, const _distancia& mediana) {
	// Calcula la dispersion para elegir un mejor vantage point
	_distancia out = 0;
	for (int i = ini; i < fin; i++)
		out += squared(img[i].first - mediana);
	return out / (fin - ini);
}

// ============ STRUCTURE IMPLEMENTATION ============
void VPTree::elegirVantagePoint(vector<pair<_distancia, Image>>& img, int ini, int fin) {
	// Se encarga de elegir el vantage point a partir de muestreos simples
	// Estadisticamente un mejor Vantage Point es el que tiene mejor dispersion
	int sizes = fin - ini;
	int sampleSize = getSetSampleSize(sizes);
	int sampleD = sampleSize + ini;
	// Genera el doble del tamanio calculado ya que la primera parte seran los candidatos
	// y la segunda mitad correspondiente al conjunto para probar los candidatos
	genRandom(img, ini, fin, sampleSize << 1);

	_distancia bestSpread = 0, mediana, spread;
	//Evalua cada cadidato
	for (int i = ini; i < sampleSize; i++) {
		//Calcula las distancias al candidato, la mediana y la dispersion
		calcularDistancias(img, sampleD, sampleD + sampleSize, img[i].second);
		mediana = calcularMediana(img, sampleD, sampleD + sampleSize);
		spread = calcularSpread(img, sampleD, sampleD + sampleSize, mediana);
		if (spread > bestSpread) {
			// Coloca el vantage point con mejor dispersion al comienzo
			bestSpread = spread;
			swap(img[ini], img[i]);
		}
	}
}

void VPTree::buildVPTree(vector<pair<_distancia, Image>>& img, VPNode** place, int ini, int fin) {
	//Construye el arbol de manera recursiva y hace el uso de indices para evitar estar el duplicando el vector
	int sizes = fin - ini;

	// Paso 0 - Condicion de parada
	if (sizes <= 0) {
		*place = 0;
		return;
	}
	if (sizes == 1) {
		*place = new VPNode(img[ini].second, 0);
		return;
	}

	// Paso 1 - Elegir el Vantage Point
	elegirVantagePoint(img, ini, fin);

	// Paso 2 - Calcula la mediana y divide los datos para el nodo izquierdo y el derecho
	calcularDistancias(img, ini + 1, fin, img[ini].second);
	int position;
	_distancia mediana = calcularMedianaDividir(img, ini + 1, fin, position);

	// Paso 3 - Crear el nodo y llamada recursiva
	*place = new VPNode(img[ini].second, mediana);

	buildVPTree(img, &((*place)->izq), ini + 1, position);
	buildVPTree(img, &((*place)->der), position, fin);
}

void VPTree::knnRecursivo(VPNode* node, priority_queue<pair<_distancia, Image*>>& q, _distancia& tau, Image& consulta, int& k) {
	// Halla los vecinos mas cercanos recursivamente
	if (!node) return;
	_distancia distancia = calcularDistancia(node->valor, consulta);

	if (q.size() < k) {
		// En el caso aun no se haya llenado la cola de prioridad
		if (distancia > tau) tau = distancia;
		q.push(pair<_distancia, Image*>(distancia, &(node->valor)));
	}
	else if (distancia < tau) {
		// En el caso se encuentre un vecino mas cercano
		q.pop();
		q.push(pair<_distancia, Image*>(distancia, &(node->valor)));
		tau = q.top().first;
	}

	if (distancia < node->distanciaMediana) {
		// Estrategia greedy para determinar en que lado buscar primero
		if (distancia <= node->distanciaMediana + tau) knnRecursivo(node->izq, q, tau, consulta, k);
		if (distancia >= node->distanciaMediana - tau) knnRecursivo(node->der, q, tau, consulta, k);
	}
	else {
		if (distancia >= node->distanciaMediana - tau) knnRecursivo(node->der, q, tau, consulta, k);
		if (distancia <= node->distanciaMediana + tau) knnRecursivo(node->izq, q, tau, consulta, k);
	}
}

void VPTree::destructorR(VPNode* root) {
	if (!root) return;
	destructorR(root->izq);
	destructorR(root->der);
	delete root;
}

void VPTree::knn(Image consulta, int k, vector<Image>& img) {
	// Encuentra los vecinos mas cercanos alistando la llamada a recursion y recibiento los datos
	priority_queue<pair<_distancia, Image*>> q;
	_distancia tau = _distanciaMAX;
	knnRecursivo(root, q, tau, consulta, k);
	k = q.size();

	while (!q.empty()) {
		img[--k] = *q.top().second;
		q.pop();
	}
}

// ============ PREPROCESAMIENTO ============
/*
void readImages(int lim = 60000) {
	// Funcion en desuso, creada para leer el archivo MNIST y escribirlo en el archivo dataset
	FILE* fimage;
	FILE* dataset;
	fimage = fopen("train-images.idx3-ubyte", "rb");
	dataset = fopen("dataset", "wb");
	assert(fimage);

	unsigned int magic, num;
	fread(&magic, 4, 1, fimage);
	assert(magic == 0x03080000);

	fread(&num, 4, 1, fimage); endianSwap(num);
	fseek(fimage, 8, SEEK_CUR);

	unsigned int aux = 0;
	vector<Image> images(lim, Image(dimensions));
	fwrite(&lim, sizeof(int), 1, dataset);

	for (Image& img : images) {
		for (int i = 0; i < dimensions; i++) {
			fread(&aux, 1, 1, fimage);
			bool temp = aux;
			img[i] = aux;
			char w = img[i] + 48;
			fwrite(&w, sizeof(char), 1, dataset);
		}
	}
	fclose(dataset);
	fclose(fimage);
}
*/